Sketch of  iterativ tower of hanoi

16. januar 2021
21:06

SEKVENS LISTE SK

FINAL LINKED LIST : FLL


ALIST

B

read  direction.
contain state.

N : number of plates

SRC  TMP  DEST

first try :
	1. LÆS SK(1)
	2. COPY  ALIST'S SK  TIL FLL: STOP HVIS 1, 3,7,15 ..ER COPY 
	3. LÆS SK(2)
	4. COPY ALIST'S SK TIL FLL
	5. SB-SWAP  INDHOLD AF ALLE ELEMENTER I A < SK
	6. LÆS SK(1)
	7. COPY A'S SK TIL FLL
	8. LÆS  SK(3)
	9. COPY A'S  SK TIL FLL.
	10. SWAP INDHOLDET AF ALLE ELEMENTER I A < SK
	11. LÆS SK(1)
	12. COPY A'S SK TIL FLL
	13. LÆS SK(2)
	14. COPY A'S SK TIL FLL
	15. SWAP INDHOLD AF ALLE ELEMENTER I A < SK
	16. LÆS SK(1)
	17. COPY A'S SK TIL FFL
	18. LÆS SEKVENS TAL SK(4)

Do something like this
 1.
5.
	6. GOTO 1.
	7. INDTIL ITERATIONER 
	8. ER ENTEN 1, 3,7,15,31 OSV .OSV.

INITIALISERE A :

INserT IN A  
POSITION STAcK of ROTATIONs oF 
TEMP OG DEST.

create SEKVENS LIST SK.

1,3,7,15,31,63..

two Types of SWAP : 
SA : SWAP DEST, AND TMP
SB :  SWAP TMP AND SRC

improvment 5. LL linked list.

	1. SB-swap  LL A's  (selector value) -1 , the remaining elements in LL A  swap SA   




make 2 linked list
ALIST ( First List )
Og 
FLL  (finish link list )

Initialize ALIST with SA swap
Og lad F være tom.

i:  iterator over SK. 

So 
1. LÆS SK(i)
2. COPY  ALL SK(i)  TIL FLL: STOP Hvis i er 1, 3,7,15.. .ellers i++
3. LÆS SK(i)
4. COPY ALL SK(i) TIL FLL
5. SB swap  ALL(i)   , the remaining - if any - elements in  A do SA swap  

Eksempel : 
N=2.
Lige

Lige Initialiserer A 

	1. tallerken
Src =    'a'
Tmp = 'c'
Dest=  'b'
 2. tallerken
Src =    'a'
Tmp = 'b'
Dest=  'c'

i=3.

Initialiserer SK :
1 ,2 , 1

1.) Læs t=SK( i)
2.) kopier tallerken t til FLL
3.)stop hvis i = 3
4.)i++
5.)Læs t=SK(i) // i = 2
6.)kopier tallerken t til FLL
7. SB swap ALL(i) =>
Tallerken 2 'state' var:
         src = 'a' 
         tmp='b'
         dest ='c'
            skriv ALL(i-1) tallerken t-1 'state'
	Src='b'
	Tmp='a'
	Dest='c'
	
	i++.

To Typer SWAP : 
SA : SWAP DEST, AND TMP
SB :  SWAP TMP AND SRC

Eksempel N = 3
I = 7.

Ulige initialiser ALIST

ALIST(3) skabes m states
Src ='a'     dest =  'c'
Src='a'      dest = 'b'
Src='a'      dest = 'c'




ALIST(1) swap
SA-swap:
Src='a' 
Tmp='c'
Dest='b'
SB-swap 
Src='c'
Tmp='a'
Dest='b'

ALIST(3)

Src='c'  dest='b'

Pseudo program code:
Initialiser lige eller ulige ALIST

Sæt
i=1

Max= 4,8, osv 

ALIST(2) swap
SA-swap:
Src='a'
Tmp='b'
Dest='c'
SB-swap:
Src='b'
Tmp='a'
Dest='c'

1.) Læs SK(i):  
2.) Kopier ALIST (sk(i)) til FLL(i) ; stop if i =2^N-1.
3.) i++; læs x=SK(i);if x > 2 goto 8
4.) kopier ALIST(x) til FLL(i); 
5.) SA- og SB-swap ALIST(1) skriv nyt ind i ALIST(1)
6.) SA- og SB-swap ALIST(2) skriv nyt ind i ALIST(2)
7.) i++; Læs SK(i); if SK(i) < 2 go to 1
8.) if SK(i)  >2  kopier ALIST(sk(i) til FLL(i) ; SA- og SB-swap ALIST ( sk(i) )
9.) go to 1

22.1.2022

TEST

Well. 
	1. Initialize Alist 

	1) SK=1
	2) Ok
	3) SK=2, i=2
	4) Ok
	5) Ok
	6) Ok
	7) i=3, SK=1
	1) SK=1
	2) Ok
	3) i=4;  SK=3
	4) Ok
	5) Ok
	6) Ok
	7) i=5 ;SK=1
	1) SK=1
	2) Ok
	3) i=6 ;SK=2
	4) Ok
	5) Ok
	6) Ok
	7) i=7; SK=1
	1) SK=1
	2) Ok.stop.
	
	
	
	
	
	22.01.2022
  
	FINAL model
	

1.) read SK(i):  
2.) Kopier ALIST (sk(i)) til FLL(i) ; stop if i =2^N-1.

3.) i++; read x=SK(i);
4.) kopier ALIST(sk(i) til FLL(i) ; SWAP
5.) i++; go to 1

Function SWAP
SA- og SB-swap ALIST from sk(i) down
annotate new values

Check :

N2

	1) I1 ; sk1
	2) ok
	3) I2, sk2
	4) Ok
	5) I3
	1) Ok.stop.
	
N3
	1) I1,sk1
	2) Ok
	3) I2 ; sk2
	4) Ok
	5) I3
	1) Sk1
	2) Ok
	3) I4;sk3
	4) I5
	1) Sk1
	2) Ok
	3) I6;sk2
	4) Ok
	5) I7
	1) Sk1
	2) ok.stop.
	
	
	
